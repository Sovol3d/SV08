### menu resume ###
[menu __resume]
type: list
name: Resume

[menu __resume __resume]
type: command
name: Resume
gcode:
    # RESUME_INTERRUPTED

[menu __resume __cancel]
type: command
name: Cancel
gcode:
    # clear_last_file
    # SAVE_VARIABLE VARIABLE=was_interrupted VALUE=False
    # RUN_SHELL_COMMAND CMD=clear_plr

### menu main ###
[menu __main]
type: list
name: Main

### menu tune ###
[menu __main __tune]
type: list
enable: {printer.print_stats.state == "paused" or printer.idle_timeout.state == "Printing"}
name: Tune

[menu __main __tune __get_ip]
type: command
name: "Show IP"
gcode:
    _GET_IP

[menu __main __tune __offsetz]
type: input
name: Offset Z:{'%05.2f' % menu.input}
input: {printer.gcode_move.homing_origin.z}
input_min: -5
input_max: 5
input_step: 0.01
realtime: True
gcode:
    SET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1
    {% set offadjust = printer.save_variables.variables.offsetadjust|float %}
    SAVE_VARIABLE VARIABLE=offsetadjust VALUE={'%05.2f' % (offadjust + menu.input - printer.gcode_move.homing_origin.z)}

[menu __main __tune __speed]
type: input
name: Speed: {'%3d' % (menu.input*100)}%
input: {printer.gcode_move.speed_factor}
input_min: 0.01
input_max: 5
input_step: 0.01
realtime: True
gcode:
    M220 S{'%d' % (menu.input*100)}

[menu __main __tune __flow]
type: input
name: Flow: {'%3d' % (menu.input*100)}%
input: {printer.gcode_move.extrude_factor}
input_min: 0.01
input_max: 2
input_step: 0.01
realtime: True
gcode:
    M221 S{'%d' % (menu.input*100)}

[menu __main __tune __fanspeed]
type: input
name: Fan speed: {'%3d' % (menu.input*100)}%
input: {printer["fan_generic fan0"].speed}
input_min: 0
input_max: 1
input_step: 0.01
gcode:
    M106 S{'%d' % (menu.input*255)}

[menu __main __tune __hotend0_target]
type: input
enable: {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name: {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input: {printer.extruder.target}
input_min: 0
input_max: {printer.configfile.config.extruder.max_temp}
input_step: 1
gcode: M104 T0 S{'%.0f' % menu.input}

[menu __main __tune __hotend1_target]
type: input
enable: {('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}
name: {"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}
input: {printer.extruder1.target}
input_min: 0
input_max: {printer.configfile.config.extruder1.max_temp}
input_step: 1
gcode: M104 T1 S{'%.0f' % menu.input}

[menu __main __tune __hotbed_target]
type: input
enable: {'heater_bed' in printer}
name: {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input: {printer.heater_bed.target}
input_min: 0
input_max: {printer.configfile.config.heater_bed.max_temp}
input_step: 1
gcode: M140 S{'%.0f' % menu.input}

[menu __main __tune __exhaustfanspeed]
type: input
name: ExhaustFan:{'%3d' % (menu.input*100)}%
input: {printer["fan_generic fan3"].speed}
input_min: 0
input_max: 1
input_step: 0.01
gcode:
    M106 P3 S{'%d' % (menu.input*255)}

[menu __main __tune __ledonoff]
type: input
enable: {'output_pin main_led' in printer}
name: Dim LED:    {'%3d%s' % (menu.input*100,'%') if menu.input else 'OFF'}
input: {printer['output_pin main_led'].value}
input_min: 0.0
input_max: 1.0
input_step: 0.01
gcode: SET_PIN PIN=main_led VALUE={menu.input}

[menu __main __tune __save]
type: list
name: "Save"

[menu __main __tune __save __save_config]
type: command
name: "Save & Exit"
gcode:
    Z_OFFSET_APPLY_PROBE
    SAVE_CONFIG

[menu __main __filament1]
type: list
enable: {('virtual_sdcard' in printer) and (printer.print_stats.state == "printing" or printer.print_stats.state == "paused")}
name: Change fil

[menu __main __filament1 __loads]
type: command
name: Load Fil
gcode:
    PAUSE
    SAVE_GCODE_STATE NAME=__filament__load
    LOAD_FILAMENT
    RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament1 __unloads]
type: command
name: Unload Fil
gcode:
    PAUSE
    SAVE_GCODE_STATE NAME=__filament__load
    UNLOAD_FILAMENT
    RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __resume]
type: command
enable: {('virtual_sdcard' in printer) and printer.print_stats.state == "paused"}
name: Resume printing
gcode:
    M117 Resume printing
    {% if "pause_resume" in printer %}
        RESUME
    {% else %}
        M24
    {% endif %}

[menu __main __pause]
type: command
enable: {('virtual_sdcard' in printer) and printer.print_stats.state == "printing"}
name: Pause printing
gcode:
    M117 Pause printing
    {% if "pause_resume" in printer %}
        PAUSE
    {% else %}
        M25
    {% endif %}

[menu __main __cancel]
type: command
enable: {('virtual_sdcard' in printer) and (printer.print_stats.state == "printing" or printer.print_stats.state == "paused")}
name: Cancel printing
gcode:
    # clear_last_file
    # SAVE_VARIABLE VARIABLE=was_interrupted VALUE=False
    # RUN_SHELL_COMMAND CMD=clear_plr
    {% if 'pause_resume' in printer %}
        CANCEL_PRINT
    {% else %}
        M25
        M27
        M26 S0
        TURN_OFF_HEATERS
        {% if printer.toolhead.position.z <= printer.toolhead.axis_maximum.z - 5 %}
            G91
            G0 Z5 F1000
            G90
        {% endif %}
    {% endif %}

### menu prepare ###
[menu __main __prepare]
type: list
enable: {not (printer.print_stats.state == "paused" or printer.idle_timeout.state == "Printing")}
name: Prepare

[menu __main __prepare __home]
type: command
name: Auto Home
gcode: G28

[menu __main __prepare __preheat_pla]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Preheat PLA
gcode:
    M117 Preheat PLA
    M140 S65
    M104 S200

[menu __main __prepare __preheat_abs]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Preheat ABS
gcode:
    M117 Preheat ABS
    M140 S80
    M104 S260

[menu __main __prepare __cooldown]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Cooldown
gcode:
    M117 Cooldown
    M104 S0
    M140 S0

### menu filament ###
[menu __main __prepare __hotend0_target]
type: input
enable: {'extruder' in printer}
name: {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input: {printer.extruder.target}
input_min: 0
input_max: {printer.configfile.config.extruder.max_temp}
input_step: 1
gcode: M104 T0 S{'%.0f' % menu.input}

### menu levelling ###
[menu __main __levelling]
type: list
enable: {not (printer.print_stats.state == "paused" or printer.idle_timeout.state == "Printing")}
name: Levelling

[menu __main __levelling __autooffsetz]
type: command
name: Calibrate Zoffset
gcode:

[menu __main __levelling __quad_gantry_level]
type: command
enable: {('quad_gantry_level' in printer)}
name: Quad Gantry Lvl
gcode:
    M117 Quad Gantry Lvl
    QUAD_GANTRY_LEVEL

[menu __main __levelling __bed_mesh]
type: command
enable: {('bed_mesh' in printer)}
name: Bed Mesh
gcode: 
    M117 Bed Mesh
    BED_MESH_CALIBRATE ADAPTIVE=1
    SAVE_CONFIG


### menu virtual sdcard ###
[menu __main __sdcard]
type: vsdlist
enable: {not (printer.print_stats.state == "paused" or printer.idle_timeout.state == "Printing")}
name: Print

### menu control ###
[menu __main __control2]
type: list
enable: {not (printer.print_stats.state == "paused" or printer.idle_timeout.state == "Printing")}
name: Control

[menu __main __control2 __hotend0_target]
type: input
enable: {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name: {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input: {printer.extruder.target}
input_min: 0
input_max: {printer.configfile.config.extruder.max_temp}
input_step: 1
gcode: M104 T0 S{'%.0f' % menu.input}

[menu __main __control2 __hotbed_target]
type: input
enable: {'heater_bed' in printer}
name: {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input: {printer.heater_bed.target}
input_min: 0
input_max: {printer.configfile.config.heater_bed.max_temp}
input_step: 1
gcode: M140 S{'%.0f' % menu.input}

[menu __main __control2 __fanspeed]
type: input
name: Fan speed: {'%3d' % (menu.input*100)}%
input: {printer["fan_generic fan0"].speed}
input_min: 0
input_max: 1
input_step: 0.01
gcode:
    M106 S{'%d' % (menu.input*255)}

[menu __main __control2 __exhaustfanspeed]
type: input
name: ExhaustFan:{'%3d' % (menu.input*100)}%
input: {printer["fan_generic fan3"].speed}
input_min: 0
input_max: 1
input_step: 0.01
gcode:
    M106 P3 S{'%d' % (menu.input*255)}

[menu __main __control2 __ledonoff]
type: input
enable: {'output_pin main_led' in printer}
name: Dim LED:    {'%3d%s' % (menu.input*100,'%') if menu.input else 'OFF'}
input: {printer['output_pin main_led'].value}
input_min: 0.0
input_max: 1.0
input_step: 0.01
gcode: SET_PIN PIN=main_led VALUE={menu.input}

### menu control ###
[menu __main __control]
type: list
enable: {not (printer.print_stats.state == "paused" or printer.idle_timeout.state == "Printing")}
name: Move

[menu __main __control __disable]
type: command
name: Steppers off
gcode:
    M84
    M18

[menu __main __control __home]
type: command
name: Auto Home
gcode: G28

### menu move 10mm ###
[menu __main __control __move_10mm]
type: list
name: Move 10mm

[menu __main __control __move_10mm __axis_x]
type: input
name: Move X:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.x}
input_min: {printer.toolhead.axis_minimum.x}
input_max: {printer.toolhead.axis_maximum.x}
input_step: 10.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 X{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_y]
type: input
name: Move Y:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.y}
input_min: {printer.toolhead.axis_minimum.y}
input_max: {printer.toolhead.axis_maximum.y}
input_step: 10.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Y{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_z]
type: input
name: Move Z:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.z}
input_min: 0
input_max: {printer.toolhead.axis_maximum.z}
input_step: 10.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Z{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_e]
type: input
name: Move E:{'%+06.1f' % menu.input}
input: 0
input_min: -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max: {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step: 10.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    M83
    G1 E{menu.input} F240
    RESTORE_GCODE_STATE NAME=__move__axis

### menu move 1mm ###
[menu __main __control __move_1mm]
type: list
name: Move 1mm

[menu __main __control __move_1mm __axis_x]
type: input
name: Move X:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.x}
input_min: {printer.toolhead.axis_minimum.x}
input_max: {printer.toolhead.axis_maximum.x}
input_step: 1.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 X{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_y]
type: input
name: Move Y:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.y}
input_min: {printer.toolhead.axis_minimum.y}
input_max: {printer.toolhead.axis_maximum.y}
input_step: 1.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Y{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_z]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Move Z:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.z}
input_min: 0
input_max: {printer.toolhead.axis_maximum.z}
input_step: 1.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Z{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_e]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Move E:{'%+06.1f' % menu.input}
input: 0
input_min: -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max: {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step: 1.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    M83
    G1 E{menu.input} F240
    RESTORE_GCODE_STATE NAME=__move__axis

### menu move 0.1mm ###
[menu __main __control __move_01mm]
type: list
enable: {not printer.idle_timeout.state == "Printing"}
name: Move 0.1mm

[menu __main __control __move_01mm __axis_x]
type: input
name: Move X:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.x}
input_min: {printer.toolhead.axis_minimum.x}
input_max: {printer.toolhead.axis_maximum.x}
input_step: 0.1
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 X{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_y]
type: input
name: Move Y:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.y}
input_min: {printer.toolhead.axis_minimum.y}
input_max: {printer.toolhead.axis_maximum.y}
input_step: 0.1
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Y{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_z]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Move Z:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.z}
input_min: 0
input_max: {printer.toolhead.axis_maximum.z}
input_step: 0.1
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Z{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_e]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Move E:{'%+06.1f' % menu.input}
input: 0
input_min: -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max: {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step: 0.1
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    M83
    G1 E{menu.input} F240
    RESTORE_GCODE_STATE NAME=__move__axis
    
### Filament Change ###
[menu __main __filament]
type: list
enable: {not (printer.print_stats.state == "paused" or printer.idle_timeout.state == "Printing")}
name: Filament

[menu __main __filament __loads]
type: command
name: Load Fil
gcode:
    SAVE_GCODE_STATE NAME=__filament__load
    LOAD_FILAMENT
    RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __unloads]
type: command
name: Unload Fil
gcode:
    SAVE_GCODE_STATE NAME=__filament__load
    UNLOAD_FILAMENT
    RESTORE_GCODE_STATE NAME=__filament__load

### menu setup ###
[menu __main __setup]
type: list
enable: {not (printer.print_stats.state == "paused" or printer.idle_timeout.state == "Printing")}
name: Advanced

[menu __main __setup __get_ip]
type: command
name: "Show IP"
gcode:
    _GET_IP

[menu __main __setup __belt_test]
type: command
name: "Belt test"
gcode:
    M117 Belt test
    G28
    SHAPER_CALIBRATE TEST=1
    FIRMWARE_RESTART

[menu __main __setup __autocalib]
type: command
name: Auto-Calibrate
gcode: 
    M117 Measure Both
    ACCELEROMETER_QUERY
    G28
    SHAPER_CALIBRATE
    SAVE_CONFIG

[menu __main __setup __timelapse_toggle]
type: input
name: Timelapse: {'ON ' if menu.input else 'OFF'}
input: {printer['gcode_macro TIMELAPSE_TAKE_FRAME'].enable}
input_min: 0
input_max: 1
input_step: 1
gcode:
    SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={1 if menu.input else 0}

[menu __main __setup __tuning]
type: command
name: PID tuning
gcode: 
    M117 Tune Hotend PID
    PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1
    M117 Tune Hotbed PID
    PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1
    SAVE_CONFIG

[menu __main __setup __obico_link]
type: list
name: {'Re-link' if printer["gcode_macro OBICO_LINK_STATUS"].is_linked else 'Link'} Obico

[menu __main __setup __obico_link _install_obico]
type: command
enable: { not printer["gcode_macro OBICO_LINK_STATUS"].is_linked and printer["gcode_macro OBICO_LINK_STATUS"].one_time_passcode == ''}
name: Install Obico
gcode:
    M117 Install Obico

[menu __main __setup __obico_link _one_time_passcode]
type: command
enable: { not printer["gcode_macro OBICO_LINK_STATUS"].is_linked and printer["gcode_macro OBICO_LINK_STATUS"].one_time_passcode != ''}
name: Code: {printer["gcode_macro OBICO_LINK_STATUS"].one_time_passcode}
gcode:
    M117 Code: {printer["gcode_macro OBICO_LINK_STATUS"].one_time_passcode}

[menu __main __setup __obico_link _relink]
type: command
enable: {printer["gcode_macro OBICO_LINK_STATUS"].is_linked}
name: Confirm Re-link
gcode:
    _OBICO_RELINK

[menu __main __info]
type: list
enable: {not (printer.print_stats.state == "paused" or printer.idle_timeout.state == "Printing")}
name: Information

[menu __main __info __version]
type: command
name: 2.3.3
gcode:

[menu __main __info __time]
type: command
name: 2024-4-27
gcode:

[menu __main __info __factory]
type: list
name: Factory resets

[menu __main __info __factory __confirm]
type: command
name: Confirm
gcode:
    RUN_SHELL_COMMAND CMD=FACTORY_RESETS

